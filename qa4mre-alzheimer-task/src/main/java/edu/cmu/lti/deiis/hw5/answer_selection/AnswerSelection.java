package edu.cmu.lti.deiis.hw5.answer_selection;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;

import org.apache.uima.UimaContext;
import org.apache.uima.analysis_component.JCasAnnotator_ImplBase;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.cas.DoubleArray;
import org.apache.uima.jcas.cas.FSArray;
import org.apache.uima.resource.ResourceInitializationException;

import edu.cmu.lti.qalab.types.Answer;
import edu.cmu.lti.qalab.types.NSentence;
import edu.cmu.lti.qalab.types.Question;
import edu.cmu.lti.qalab.types.QuestionAnswerSet;
import edu.cmu.lti.qalab.types.TestDocument;
import edu.cmu.lti.qalab.utils.Utils;

public abstract class AnswerSelection extends JCasAnnotator_ImplBase{
 
  private final boolean IS_DEBUG_MAX_NSENT = false;
  float SCORE_THR = (float) 0.1;
  ArrayList<DocumentEvaluation> docEvals = new ArrayList<AnswerSelectionByLinearInterp.DocumentEvaluation>();
  
  @Override
  public void initialize(UimaContext context) throws ResourceInitializationException {
    super.initialize(context);
    //SCORE_THR = (Float) context.getConfigParameterValue("SCORE_THR");
  }
  
  @Override
  public void process(JCas aJCas) throws AnalysisEngineProcessException {
    TestDocument testDoc = Utils.getTestDocumentFromCAS(aJCas);
    ArrayList<QuestionAnswerSet> qaSet = Utils.fromFSListToCollection(testDoc.getQaList(),
            QuestionAnswerSet.class);
    int matched = 0;
    int total = 0;
    int unanswered = 0;
    for (int i = 0; i < qaSet.size(); i++) {
      System.out.println("Processing Question No." + (i+1));
      Question question = qaSet.get(i).getQuestion();
      System.out.println("Question: " + question.getText());
      System.out.println("Candidate Answer" + "\t" + "finalScore");
      ArrayList<Answer> choiceList = Utils.fromFSListToCollection(qaSet.get(i).getAnswerList(),
              Answer.class);
      
      Answer noneOfAbove = null;
      for (int j = 0; j < choiceList.size(); j++) {
        Answer candAnswer = choiceList.get(j);
        double finalScore = getFinalScore(candAnswer);
        candAnswer.setFinalScore(finalScore);
        if (candAnswer.getText().equals("None of the above")){
          noneOfAbove = candAnswer;
        }
      }
      
      Collections.sort(choiceList, new AnswerFinalScoreComparator());
      Answer topAnswer = choiceList.get(0);
      if (topAnswer.getFinalScore() < SCORE_THR) {
        if (noneOfAbove != null){
          noneOfAbove.setIsSelected(true);
        }
        unanswered++;
      }else{
        topAnswer.setIsSelected(true);
      }
      
      for(Answer ans : choiceList){
        if(ans.getIsCorrect() && ans.getIsSelected()){
          matched++;
          if (IS_DEBUG_MAX_NSENT) {
            DoubleArray scores = topAnswer.getBaselineScore();
            FSArray maxNSentence = topAnswer.getMaxScoredNSentences();
            
            for (int j = 0; j < maxNSentence.size(); j++) {
              System.out.println("MAX Sent: " + j + "\t" + scores.get(j) + "\t"
                      + ((NSentence)maxNSentence.get(j)).getText());
            }
          }
        }
      }
      
      for (Answer candAns : choiceList) {
        System.out.println(candAns.getText() + "\t" + candAns.getFinalScore() + "\t"
                + (candAns.getIsCorrect() ? "(gold standard)" : ""));
      }

      total++;
      System.out.println("================================================");
    }

    System.out.println("Correct: " + matched + "/" + total + "=" + ((matched * 100.0) / total)
            + "%");
    // TO DO: Reader of this pipe line should read from xmi generated by
    // SimpleRunCPE
    double cAt1 = (((double) matched) / ((double) total) * unanswered + (double) matched)
            * (1.0 / total);
    System.out.println("c@1 score:" + cAt1);
    

    TestDocument srcDoc = Utils.getTestDocumentFromCAS(aJCas);
    String docId = srcDoc.getId();
    docEvals.add(new DocumentEvaluation(docId, cAt1, matched, unanswered, total));

  }
  
  abstract double getFinalScore(Answer candAnswer);

  @Override
  public void collectionProcessComplete() throws AnalysisEngineProcessException {
    super.collectionProcessComplete();
    System.out.println("\nPeformance Summary: ");
    int totalCorrect = 0;
    int total = 0;
    double cAt1 = 0;
    for(DocumentEvaluation docEval : docEvals){
      System.out.println(docEval.toString());
      totalCorrect += docEval.corrected;
      total += docEval.total;
      cAt1 += docEval.cAt1;
    }
    System.out.println("Total correct: "+ totalCorrect + "/" + total);
    System.out.println("Mean C@1: "+ cAt1/docEvals.size());
  }
  
  static class DocumentEvaluation{
    String docName;
    double cAt1;
    int corrected;
    int unanswered;
    int total;
    static final DecimalFormat df = new DecimalFormat("#.##");
    
    public DocumentEvaluation(String docName, double cAt1, int corrected, int unanswered, int total) {
      super();
      this.docName = docName;
      this.cAt1 = cAt1;
      this.corrected = corrected;
      this.unanswered = unanswered;
      this.total = total;
    }

    @Override
    public String toString() {
      return "DocumentEvaluation [docName=" + docName + ", cAt1=" + cAt1 + ", corrected="
              + corrected + ", unanswered=" + unanswered + ", total=" + total + "]";
    }
  }
}
