package edu.cmu.lti.deiis.hw5.answer_selection;

import java.util.ArrayList;
import java.util.HashMap;

import org.apache.uima.UimaContext;
import org.apache.uima.analysis_component.JCasAnnotator_ImplBase;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.cas.DoubleArray;
import org.apache.uima.resource.ResourceInitializationException;

import edu.cmu.lti.qalab.types.Answer;
import edu.cmu.lti.qalab.types.CandidateAnswer;
import edu.cmu.lti.qalab.types.CandidateSentence;
import edu.cmu.lti.qalab.types.Question;
import edu.cmu.lti.qalab.types.QuestionAnswerSet;
import edu.cmu.lti.qalab.types.TestDocument;
import edu.cmu.lti.qalab.utils.Utils;

public class AnswerSelectionByLinearInterp extends JCasAnnotator_ImplBase {
  float SCORE_THR = (float) 0.1;
  
  @Override
  public void initialize(UimaContext context) throws ResourceInitializationException {
    super.initialize(context);
    SCORE_THR = (Float) context.getConfigParameterValue("SCORE_THR");
  }

  @Override
  public void process(JCas aJCas) throws AnalysisEngineProcessException {
    TestDocument testDoc = Utils.getTestDocumentFromCAS(aJCas);
    ArrayList<QuestionAnswerSet> qaSet = Utils.fromFSListToCollection(testDoc.getQaList(),
            QuestionAnswerSet.class);
    int matched = 0;
    int total = 0;
    int unanswered = 0;
    for (int i = 0; i < qaSet.size(); i++) {
      System.out.println("Processing Question" + i);
      Question question = qaSet.get(i).getQuestion();
      System.out.println("Question: " + question.getText());
      System.out.println("Candidate Answer" + "\t" + "finalScore");
      ArrayList<Answer> choiceList = Utils.fromFSListToCollection(qaSet.get(i).getAnswerList(),
              Answer.class);
      double maxScore = Double.NEGATIVE_INFINITY;
      int maxIndex = 0;
      int correctIndex = 0;
      String correct = "";
      for (int j = 0; j < choiceList.size(); j++) {
        Answer candAnswer = choiceList.get(j);
        DoubleArray baselineScore = candAnswer.getBaselineScore();
        double PMIScore = candAnswer.getPMIscore();
        double finalScore = getFinalScore(baselineScore, PMIScore);
        System.out.println(candAnswer.getText() + "\t" + finalScore);
        if (finalScore > maxScore) {
          maxScore = finalScore;
          maxIndex = j;
        }
        if (candAnswer.getIsCorrect()) {
          correctIndex = j;
          correct = candAnswer.getText();
        }
      }
      if (maxIndex == correctIndex) {
        matched++;
      }
      
      if (maxScore < SCORE_THR) {
        unanswered++;
      }
      total++;
      System.out.println("Correct answer:" + correct);
      System.out.println("================================================");
    }

    System.out.println("Correct: " + matched + "/" + total + "=" + ((matched * 100.0) / total)
            + "%");
    // TO DO: Reader of this pipe line should read from xmi generated by
    // SimpleRunCPE
    double cAt1 = (((double) matched) / ((double) total) * unanswered + (double) matched)
            * (1.0 / total);
    System.out.println("c@1 score:" + cAt1);

  }

  private double getFinalScore(DoubleArray baselineScore, double PMIScore) {
    double result = 0;

    result += baselineScore.get(0) * 0.2 + baselineScore.get(1) * 0.1 + baselineScore.get(2) * 0.1
            + baselineScore.get(3) * 0.1 + baselineScore.get(4) * 0.1 + baselineScore.get(5) * 0.1
            + PMIScore * 0.3;

    return result;
  }

}
